'use strict';

(function () {
  //timer
  var display = document.querySelector('.time'),
      anim = void 0,
      watch = void 0,
      displayBreak = document.querySelector('.break-time'),
      watchBreak = void 0,
      animBreak = void 0,
      audio = new Audio('http://artot.net/sounds/win.mp3'),
      percentage = void 0,
      sessionTime = document.querySelector('.session__time ');

  // define function for setInterval
  function getSeconds(hour) {
    //console.log(min);
    if (hour < 10) {
      console.log(hour);
      return hour;
    } else {
      var min = hour.textContent.split(':');
      console.log(hour);
      return parseInt(min[0], 10) * 60;
    }
  }
  // define function for setInterval
  function circularLoop(init, min, action) {
    var current = init;
    return function () {
      action(current);
      if (current - 1 === min) {
        current = min;
      } else if (current > 0) {
        current--;
      }
    };
  }

  var orig = document.querySelector('.arcAnim path'),
      length = 0,
      timer = void 0,

  //arcAnim = document.querySelector('.arcAnim'),
  pathLength = 472,

  //pathLength= orig.getTotalLength(), 
  distancePerPoint = void 0;

  watch = function watch() {
    var seconds = void 0,
        minutes = void 0;
    anim = setInterval(circularLoop(getSeconds(display), 0, function (currSecond) {
      //parseInt() return integer ex 110/ 60 = 1.83333 with parseInt it's 1
      //I'm using Math.floor, both do the same work
      minutes = parseInt(currSecond / 60, 10);
      // seconds = 122s / 60 = 120 and remain 2
      seconds = parseInt(currSecond % 60, 10);
      //print a 0 first if minuste is less than 10 minutes 
      minutes = minutes < 10 ? "0" + minutes : minutes;
      seconds = seconds < 10 ? "0" + seconds : seconds;
      display.textContent = minutes + ":" + seconds;

      //svg
      distancePerPoint = 472 / getSeconds(sessionTime);
      length += distancePerPoint;
      //length=0 and path lenght = stroke-dasharray soit 472
      orig.style.strokeDasharray = [length, pathLength].join(' ');
      console.log([length, pathLength].join(' '));

      if (currSecond === 0) {
        clearInterval(anim);
        watchBreak();
        audio.play();
        length = 0;
      }

      //SVG
      //transform second to perimetre
      //donc 10min * 60 on obtient le resutat en seconde et le diametre du 
      //perimetre
      //let t = currSecond / (25 * 60) * 472
      //let distancePerPoint = 1
      //let orig = document.querySelector('#my-svg path'), length, timer;
      //let pathLength = orig.getTotalLength();

      //orig.style.stroke = '#000';
      //orig.style.strokeDasharray = t.toFixed();
      //console.log(t.toFixed());
      //console.log( pathLength  );
    }), 1000);
  };
  watchBreak = function watchBreak() {
    var seconds = void 0,
        minutes = void 0;
    animBreak = setInterval(circularLoop(getSeconds(displayBreak), 0, function (currSecond) {
      minutes = parseInt(currSecond / 60, 10);
      seconds = parseInt(currSecond % 60, 10);
      minutes = minutes < 10 ? "0" + minutes : minutes;
      seconds = seconds < 10 ? "0" + seconds : seconds;
      display.textContent = minutes + ":" + seconds;
      if (currSecond === 0) {
        clearInterval(animBreak);
        audio.play();
      }
    }), 1000);
  };
  //END TIMER

  //Event + and -
  //
  var sessionPlus = document.querySelector('.session__plus'),
      sessionMinus = document.querySelector('.session__minus'),
      breakPlus = document.querySelector('.break__plus'),
      breakMinus = document.querySelector('.break__minus'),
      time = document.querySelector('.time'),
      breakTime = document.querySelector('.break-time'),
      play = document.querySelector('.play'),
      stop = document.querySelector('.icon-stop'),
      pause = document.querySelector('.pause');

  function previousMinus(e) {
    var prev = this.previousSibling,
        val = parseInt(prev.textContent, 10);
    if (val > 0) {
      prev.textContent--;
      if (val === 1) {
        prev.classList.add('alert');
      }
    }
    if (!this.classList.contains('break__minus')) {
      time.textContent = prev.textContent + ':00';
      clearInterval(anim);
    } else {
      breakTime.textContent = prev.textContent + ':00';
    }

    play.classList.add('show');
    play.classList.remove('hide');
    pause.classList.add('hide');
    pause.classList.remove('show');
    stop.classList.remove('show');
    stop.classList.add('hide');

    //svg
    //distancePerPoint = 472 / getSeconds(sessionTime )
    length = 0;
    orig.style.strokeDasharray = 472;
    orig.classList.add('hide');
    e.preventDefault();
  }
  function nextPlus(e) {
    var next = this.nextSibling;
    var val = parseInt(next.textContent, 10);
    next.textContent++;
    if (val === 0) {
      next.classList.remove('alert');
    }
    if (!this.classList.contains('break__plus')) {
      time.textContent = next.textContent + ':00';
      clearInterval(anim);
    } else {
      breakTime.textContent = next.textContent + ':00';
    }
    play.classList.add('show');
    play.classList.remove('hide');
    pause.classList.add('hide');
    pause.classList.remove('show');
    stop.classList.remove('show');
    stop.classList.add('hide');

    //svg
    //distancePerPoint = 472 / getSeconds(sessionTime )
    length = 0;
    orig.style.strokeDasharray = 472;
    orig.classList.add('hide');
    e.preventDefault();
  }

  sessionMinus.addEventListener('click', previousMinus);
  sessionPlus.addEventListener('click', nextPlus);
  breakMinus.addEventListener('click', previousMinus);
  breakPlus.addEventListener('click', nextPlus);
  play.addEventListener('click', playPodomoro);
  pause.addEventListener('click', pausePodomoro);
  stop.addEventListener('click', stopPodomoro);

  function playPodomoro(e) {
    audio.play();
    watch(display);
    orig.classList.remove('hide');

    play.classList.add('hide');
    play.classList.remove('show');
    pause.classList.add('show');
    pause.classList.remove('hide');
    stop.classList.remove('hide');
    stop.classList.add('show');
    stop.classList.remove('pause');
  }
  function pausePodomoro(e) {
    clearInterval(anim);
    play.classList.add('show');
    play.classList.remove('hide');
    pause.classList.add('hide');
    pause.classList.remove('show');
    stop.classList.add('pause');
  }
  function stopPodomoro(e) {
    clearInterval(anim);
    clearInterval(animBreak);
    play.classList.add('show');
    play.classList.remove('hide');
    pause.classList.add('hide');
    pause.classList.remove('show');
    stop.classList.remove('show');
    stop.classList.add('hide');
    //time
    console.log(sessionTime);
    var sessionStop = sessionTime.innerHTML;
    time.textContent = sessionStop + ':00';
    //svg
    length = 0;
    orig.style.strokeDasharray = 472;
    orig.classList.add('hide');
  }
})(); //END
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJkaXNwbGF5IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYW5pbSIsIndhdGNoIiwiZGlzcGxheUJyZWFrIiwid2F0Y2hCcmVhayIsImFuaW1CcmVhayIsImF1ZGlvIiwiQXVkaW8iLCJwZXJjZW50YWdlIiwic2Vzc2lvblRpbWUiLCJnZXRTZWNvbmRzIiwiaG91ciIsImNvbnNvbGUiLCJsb2ciLCJtaW4iLCJ0ZXh0Q29udGVudCIsInNwbGl0IiwicGFyc2VJbnQiLCJjaXJjdWxhckxvb3AiLCJpbml0IiwiYWN0aW9uIiwiY3VycmVudCIsIm9yaWciLCJsZW5ndGgiLCJ0aW1lciIsInBhdGhMZW5ndGgiLCJkaXN0YW5jZVBlclBvaW50Iiwic2Vjb25kcyIsIm1pbnV0ZXMiLCJzZXRJbnRlcnZhbCIsImN1cnJTZWNvbmQiLCJzdHlsZSIsInN0cm9rZURhc2hhcnJheSIsImpvaW4iLCJjbGVhckludGVydmFsIiwicGxheSIsInNlc3Npb25QbHVzIiwic2Vzc2lvbk1pbnVzIiwiYnJlYWtQbHVzIiwiYnJlYWtNaW51cyIsInRpbWUiLCJicmVha1RpbWUiLCJzdG9wIiwicGF1c2UiLCJwcmV2aW91c01pbnVzIiwiZSIsInByZXYiLCJwcmV2aW91c1NpYmxpbmciLCJ2YWwiLCJjbGFzc0xpc3QiLCJhZGQiLCJjb250YWlucyIsInJlbW92ZSIsInByZXZlbnREZWZhdWx0IiwibmV4dFBsdXMiLCJuZXh0IiwibmV4dFNpYmxpbmciLCJhZGRFdmVudExpc3RlbmVyIiwicGxheVBvZG9tb3JvIiwicGF1c2VQb2RvbW9ybyIsInN0b3BQb2RvbW9ybyIsInNlc3Npb25TdG9wIiwiaW5uZXJIVE1MIl0sIm1hcHBpbmdzIjoiOztBQUFDLGFBQVc7QUFDVjtBQUNBLE1BQUlBLFVBQVVDLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZDtBQUFBLE1BQThDQyxhQUE5QztBQUFBLE1BQW9EQyxjQUFwRDtBQUFBLE1BQ0FDLGVBQWVK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VUFBTU0sU0FBTixDQUFnQkcsTUFBaEIsQ0FBdUIsTUFBdkI7QUFDQVYsU0FBS08sU0FBTCxDQUFlRyxNQUFmLENBQXNCLE1BQXRCO0FBQ0FWLFNBQUtPLFNBQUwsQ0FBZUMsR0FBZixDQUFtQixNQUFuQjtBQUNBO0FBQ0F0QyxZQUFRQyxHQUFSLENBQVlKLFdBQVo7QUFDQSxRQUFJb0QsY0FBY3BELFlBQVlxRCxTQUE5QjtBQUNBdEIsU0FBS3pCLFdBQUwsR0FBbUI4QyxjQUFlLEtBQWxDO0FBQ0E7QUFDQXRDLGFBQU8sQ0FBUDtBQUNBRCxTQUFLUyxLQUFMLENBQVdDLGVBQVgsR0FBNkIsR0FBN0I7QUFDQVYsU0FBSzJCLFNBQUwsQ0FBZUMsR0FBZixDQUFtQixNQUFuQjtBQUNEO0FBRUYsQ0E1TkEsR0FBRCxDLENBNE5LIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgLy90aW1lclxuICBsZXQgZGlzcGxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lJyksYW5pbSwgd2F0Y2ggLFxuICBkaXNwbGF5QnJlYWsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnJlYWstdGltZScpLHdhdGNoQnJlYWsgLCBhbmltQnJlYWssXG4gIGF1ZGlvID0gbmV3IEF1ZGlvKCdodHRwOi8vYXJ0b3QubmV0L3NvdW5kcy93aW4ubXAzJyksIHBlcmNlbnRhZ2UsXG4gICAgc2Vzc2lvblRpbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2Vzc2lvbl9fdGltZSAnKVxuXG4gICAgICAgIFxuXG4gIC8vIGRlZmluZSBmdW5jdGlvbiBmb3Igc2V0SW50ZXJ2YWxcbiAgZnVuY3Rpb24gZ2V0U2Vjb25kcyhob3VyKSB7XG4gICAgLy9jb25zb2xlLmxvZyhtaW4pO1xuICAgIGlmIChob3VyIDwgMTApIHtcbiAgICAgIGNvbnNvbGUubG9nKGhvdXIpO1xuICAgICAgcmV0dXJuIGhvdXJcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG1pbiA9IGhvdXIudGV4dENvbnRlbnQuc3BsaXQoJzonKVxuICAgICAgY29uc29sZS5sb2coaG91cik7XG4gICAgICByZXR1cm4gcGFyc2VJbnQobWluWzBdLCAxMCkqIDYwXG4gICAgfVxuICAgIFxuICB9XG4gIC8vIGRlZmluZSBmdW5jdGlvbiBmb3Igc2V0SW50ZXJ2YWxcbiAgZnVuY3Rpb24gY2lyY3VsYXJMb29wKGluaXQsIG1pbiwgYWN0aW9uKSB7XG4gICAgbGV0IGN1cnJlbnQgPSBpbml0O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGFjdGlvbihjdXJyZW50KTtcbiAgICAgIGlmIChjdXJyZW50IC0gMSA9PT0gbWluKSB7XG4gICAgICAgIGN1cnJlbnQgPSBtaW47XG4gICAgICB9IGVsc2UgaWYoY3VycmVudCA+IDApe1xuICAgICAgICBjdXJyZW50LS07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IG9yaWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJjQW5pbSBwYXRoJyksIGxlbmd0aD0wLCB0aW1lcixcbiAgICAvL2FyY0FuaW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJjQW5pbScpLFxuICAgIHBhdGhMZW5ndGg9IDQ3MiwgXG4gICAgLy9wYXRoTGVuZ3RoPSBvcmlnLmdldFRvdGFsTGVuZ3RoKCksIFxuICAgIGRpc3RhbmNlUGVyUG9pbnQgXG5cbiAgd2F0Y2ggPSAoKSA9PiB7XG4gICAgbGV0IHNlY29uZHMsIG1pbnV0ZXM7XG4gICAgICBhbmltID0gc2V0SW50ZXJ2YWwoY2lyY3VsYXJMb29wKGdldFNlY29uZHMoZGlzcGxheSkgLCAwLCBmdW5jdGlvbihjdXJyU2Vjb25kKSB7XG4gICAgICAvL3BhcnNlSW50KCkgcmV0dXJuIGludGVnZXIgZXggMTEwLyA2MCA9IDEuODMzMzMgd2l0aCBwYXJzZUludCBpdCdzIDFcbiAgICAgIC8vSSdtIHVzaW5nIE1hdGguZmxvb3IsIGJvdGggZG8gdGhlIHNhbWUgd29ya1xuICAgICAgbWludXRlcyA9IHBhcnNlSW50KGN1cnJTZWNvbmQgIC8gNjAsIDEwKTtcbiAgICAgIC8vIHNlY29uZHMgPSAxMjJzIC8gNjAgPSAxMjAgYW5kIHJlbWFpbiAyXG4gICAgICBzZWNvbmRzID0gcGFyc2VJbnQoY3VyclNlY29uZCAgJSA2MCwgMTApO1xuICAgICAgLy9wcmludCBhIDAgZmlyc3QgaWYgbWludXN0ZSBpcyBsZXNzIHRoYW4gMTAgbWludXRlcyBcbiAgICAgIG1pbnV0ZXMgPSBtaW51dGVzIDwgMTAgPyBcIjBcIiArIG1pbnV0ZXMgOiBtaW51dGVzO1xuICAgICAgc2Vjb25kcyA9IHNlY29uZHMgPCAxMCA/IFwiMFwiICsgc2Vjb25kcyA6IHNlY29uZHM7XG4gICAgICBkaXNwbGF5LnRleHRDb250ZW50ID0gbWludXRlcyArIFwiOlwiICsgc2Vjb25kcztcblxuICAgICAgLy9zdmdcbiAgICAgIGRpc3RhbmNlUGVyUG9pbnQgPSA0NzIgLyBnZXRTZWNvbmRzKHNlc3Npb25UaW1lIClcbiAgICAgIGxlbmd0aCArPSBkaXN0YW5jZVBlclBvaW50O1xuICAgICAgLy9sZW5ndGg9MCBhbmQgcGF0aCBsZW5naHQgPSBzdHJva2UtZGFzaGFycmF5IHNvaXQgNDcyXG4gICAgICBvcmlnLnN0eWxlLnN0cm9rZURhc2hhcnJheSA9IFtsZW5ndGgscGF0aExlbmd0aF0uam9pbignICcpO1xuICAgICAgY29uc29sZS5sb2coW2xlbmd0aCxwYXRoTGVuZ3RoXS5qb2luKCcgJykpO1xuXG4gICAgICBpZiAoY3VyclNlY29uZCA9PT0gMCkge1xuICAgICAgICBjbGVhckludGVydmFsKGFuaW0pXG4gICAgICAgIHdhdGNoQnJlYWsoKVxuICAgICAgICBhdWRpby5wbGF5KCk7XG4gICAgICAgIGxlbmd0aD0wXG4gICAgICB9XG5cbiAgICAgICAgLy9TVkdcbiAgICAgICAgLy90cmFuc2Zvcm0gc2Vjb25kIHRvIHBlcmltZXRyZVxuICAgICAgICAvL2RvbmMgMTBtaW4gKiA2MCBvbiBvYnRpZW50IGxlIHJlc3V0YXQgZW4gc2Vjb25kZSBldCBsZSBkaWFtZXRyZSBkdSBcbiAgICAgICAgLy9wZXJpbWV0cmVcbiAgICAgICAgLy9sZXQgdCA9IGN1cnJTZWNvbmQgLyAoMjUgKiA2MCkgKiA0NzJcbiAgICAgICAgLy9sZXQgZGlzdGFuY2VQZXJQb2ludCA9IDFcbiAgICAgICAgLy9sZXQgb3JpZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNteS1zdmcgcGF0aCcpLCBsZW5ndGgsIHRpbWVyO1xuICAgICAgICAvL2xldCBwYXRoTGVuZ3RoID0gb3JpZy5nZXRUb3RhbExlbmd0aCgpO1xuXG4gICAgICAgIC8vb3JpZy5zdHlsZS5zdHJva2UgPSAnIzAwMCc7XG4gICAgICAgIC8vb3JpZy5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSB0LnRvRml4ZWQoKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0LnRvRml4ZWQoKSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coIHBhdGhMZW5ndGggICk7XG5cbiAgICAgIH0pLCAxMDAwKTtcbiAgfVxuICB3YXRjaEJyZWFrID0gKCkgPT4ge1xuICAgIGxldCBzZWNvbmRzLCBtaW51dGVzO1xuICAgIGFuaW1CcmVhayA9IHNldEludGVydmFsKGNpcmN1bGFyTG9vcChnZXRTZWNvbmRzKGRpc3BsYXlCcmVhaykgLCAwLCBmdW5jdGlvbihjdXJyU2Vjb25kKSB7XG4gICAgICBtaW51dGVzID0gcGFyc2VJbnQoY3VyclNlY29uZCAgLyA2MCwgMTApO1xuICAgICAgc2Vjb25kcyA9IHBhcnNlSW50KGN1cnJTZWNvbmQgICUgNjAsIDEwKTtcbiAgICAgIG1pbnV0ZXMgPSBtaW51dGVzIDwgMTAgPyBcIjBcIiArIG1pbnV0ZXMgOiBtaW51dGVzO1xuICAgICAgc2Vjb25kcyA9IHNlY29uZHMgPCAxMCA/IFwiMFwiICsgc2Vjb25kcyA6IHNlY29uZHM7XG4gICAgICBkaXNwbGF5LnRleHRDb250ZW50ID0gbWludXRlcyArIFwiOlwiICsgc2Vjb25kcztcbiAgICAgIGlmIChjdXJyU2Vjb25kID09PSAwKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoYW5pbUJyZWFrKVxuICAgICAgICBhdWRpby5wbGF5KCk7XG4gICAgICB9XG4gICAgfSksIDEwMDApO1xuICB9XG4gIC8vRU5EIFRJTUVSXG5cbiAgLy9FdmVudCArIGFuZCAtXG4gIC8vXG4gIGxldCBzZXNzaW9uUGx1cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZXNzaW9uX19wbHVzJyksXG4gICAgc2Vzc2lvbk1pbnVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlc3Npb25fX21pbnVzJyksXG4gICAgYnJlYWtQbHVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJyZWFrX19wbHVzJyksXG4gICAgYnJlYWtNaW51cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5icmVha19fbWludXMnKSxcbiAgICB0aW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWUnKSxcbiAgICBicmVha1RpbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnJlYWstdGltZScpLFxuICAgIHBsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGxheScpLFxuICAgIHN0b3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaWNvbi1zdG9wJyksXG4gICAgcGF1c2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGF1c2UnKVxuXG4gIGZ1bmN0aW9uIHByZXZpb3VzTWludXMgKGUpIHtcbiAgICBsZXQgcHJldj0gdGhpcy5wcmV2aW91c1NpYmxpbmcsXG4gICAgICB2YWwgPSBwYXJzZUludChwcmV2LnRleHRDb250ZW50LCAxMClcbiAgICBpZiAodmFsID4gMCkge1xuICAgICAgcHJldi50ZXh0Q29udGVudC0tXG4gICAgICBpZiAodmFsID09PSAxKSB7XG4gICAgICAgIHByZXYuY2xhc3NMaXN0LmFkZCgnYWxlcnQnKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdicmVha19fbWludXMnKSkge1xuICAgICAgdGltZS50ZXh0Q29udGVudCA9IHByZXYudGV4dENvbnRlbnQgKyAnOjAwJ1xuICAgICAgY2xlYXJJbnRlcnZhbChhbmltKVxuICAgIH0gZWxzZXtcbiAgICAgIGJyZWFrVGltZS50ZXh0Q29udGVudCA9IHByZXYudGV4dENvbnRlbnQgKyAnOjAwJ1xuXG4gICAgfSBcblxuICAgIHBsYXkuY2xhc3NMaXN0LmFkZCgnc2hvdycpXG4gICAgcGxheS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJylcbiAgICBwYXVzZS5jbGFzc0xpc3QuYWRkKCdoaWRlJylcbiAgICBwYXVzZS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcbiAgICBzdG9wLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKVxuICAgIHN0b3AuY2xhc3NMaXN0LmFkZCgnaGlkZScpXG5cbiAgICAvL3N2Z1xuICAgIC8vZGlzdGFuY2VQZXJQb2ludCA9IDQ3MiAvIGdldFNlY29uZHMoc2Vzc2lvblRpbWUgKVxuICAgIGxlbmd0aD0wXG4gICAgb3JpZy5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSA0NzJcbiAgICBvcmlnLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0UGx1cyhlKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzLm5leHRTaWJsaW5nXG4gICAgbGV0IHZhbCA9IHBhcnNlSW50KG5leHQudGV4dENvbnRlbnQsIDEwKVxuICAgIG5leHQudGV4dENvbnRlbnQrK1xuICAgIGlmICh2YWwgPT09IDApIHtcbiAgICAgIG5leHQuY2xhc3NMaXN0LnJlbW92ZSgnYWxlcnQnKVxuICAgIH1cbiAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdicmVha19fcGx1cycpKSB7XG4gICAgICB0aW1lLnRleHRDb250ZW50ID0gbmV4dC50ZXh0Q29udGVudCArICc6MDAnXG4gICAgICBjbGVhckludGVydmFsKGFuaW0pXG4gICAgfSBlbHNle1xuICAgICAgYnJlYWtUaW1lLnRleHRDb250ZW50ID0gbmV4dC50ZXh0Q29udGVudCArICc6MDAnXG4gICAgfSBcbiAgICBwbGF5LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKVxuICAgIHBsYXkuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpXG4gICAgcGF1c2UuY2xhc3NMaXN0LmFkZCgnaGlkZScpXG4gICAgcGF1c2UuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpXG4gICAgc3RvcC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcbiAgICBzdG9wLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxuXG4gICAgLy9zdmdcbiAgICAvL2Rpc3RhbmNlUGVyUG9pbnQgPSA0NzIgLyBnZXRTZWNvbmRzKHNlc3Npb25UaW1lIClcbiAgICBsZW5ndGg9MFxuICAgIG9yaWcuc3R5bGUuc3Ryb2tlRGFzaGFycmF5ID0gNDcyXG4gICAgb3JpZy5jbGFzc0xpc3QuYWRkKCdoaWRlJylcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBzZXNzaW9uTWludXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLHByZXZpb3VzTWludXMgKTtcbiAgc2Vzc2lvblBsdXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBuZXh0UGx1cyk7XG4gIGJyZWFrTWludXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLHByZXZpb3VzTWludXMgKTtcbiAgYnJlYWtQbHVzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmV4dFBsdXMpO1xuICBwbGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcGxheVBvZG9tb3JvKTtcbiAgcGF1c2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwYXVzZVBvZG9tb3JvKTtcbiAgc3RvcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN0b3BQb2RvbW9ybyk7XG5cbiAgZnVuY3Rpb24gcGxheVBvZG9tb3JvKGUpIHtcbiAgICBhdWRpby5wbGF5KCk7XG4gICAgd2F0Y2goZGlzcGxheSlcbiAgICBvcmlnLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuXG4gICAgcGxheS5jbGFzc0xpc3QuYWRkKCdoaWRlJylcbiAgICBwbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKVxuICAgIHBhdXNlLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKVxuICAgIHBhdXNlLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuICAgIHN0b3AuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpXG4gICAgc3RvcC5jbGFzc0xpc3QuYWRkKCdzaG93JylcbiAgICBzdG9wLmNsYXNzTGlzdC5yZW1vdmUoJ3BhdXNlJylcbiAgfVxuICBmdW5jdGlvbiBwYXVzZVBvZG9tb3JvKGUpIHtcbiAgICBjbGVhckludGVydmFsKGFuaW0pXG4gICAgcGxheS5jbGFzc0xpc3QuYWRkKCdzaG93JylcbiAgICBwbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuICAgIHBhdXNlLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxuICAgIHBhdXNlLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKVxuICAgIHN0b3AuY2xhc3NMaXN0LmFkZCgncGF1c2UnKVxuXG4gIH1cbiAgZnVuY3Rpb24gc3RvcFBvZG9tb3JvKGUpIHtcbiAgICBjbGVhckludGVydmFsKGFuaW0pXG4gICAgY2xlYXJJbnRlcnZhbChhbmltQnJlYWspXG4gICAgcGxheS5jbGFzc0xpc3QuYWRkKCdzaG93JylcbiAgICBwbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKVxuICAgIHBhdXNlLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKVxuICAgIHBhdXNlLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKVxuICAgIHN0b3AuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpXG4gICAgc3RvcC5jbGFzc0xpc3QuYWRkKCdoaWRlJylcbiAgICAvL3RpbWVcbiAgICBjb25zb2xlLmxvZyhzZXNzaW9uVGltZSk7XG4gICAgbGV0IHNlc3Npb25TdG9wID0gc2Vzc2lvblRpbWUuaW5uZXJIVE1MXG4gICAgdGltZS50ZXh0Q29udGVudCA9IHNlc3Npb25TdG9wICArICc6MDAnXG4gICAgLy9zdmdcbiAgICBsZW5ndGg9MFxuICAgIG9yaWcuc3R5bGUuc3Ryb2tlRGFzaGFycmF5ID0gNDcyXG4gICAgb3JpZy5jbGFzc0xpc3QuYWRkKCdoaWRlJylcbiAgfVxuXG59KCkpOy8vRU5EXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
