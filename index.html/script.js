'use strict';

var fcc = 'free code camp';
(function (fcc) {
  //timer
  var display = document.querySelector('.time'),
      displayBreak = document.querySelector('.break-time');
  // define function for setInterval
  function getSeconds(hour) {
    var min = hour.textContent.split(':');
    return parseInt(min[0], 10) * 60;
  }
  // define function for setInterval
  function circularLoop(init, min, action) {
    var current = init;
    return function () {
      action(current);
      if (current - 1 === min) {
        current = min;
      } else if (current > 0) {
        current--;
      }
    };
  }
  var anim = void 0;
  var watch = function watch(display) {
    var seconds = void 0,
        minutes = void 0;
    anim = setInterval(circularLoop(getSeconds(display), 0, function (currSecond) {
      //parseInt() return integer ex 110/ 60 = 1.83333 with parseInt it's 1
      //I'm using Math.floor, both do the same work
      minutes = parseInt(currSecond / 60, 10);
      // seconds = 122s / 60 = 120 and remain 2
      seconds = parseInt(currSecond % 60, 10);

      //print a 0 first if minuste is less than 10 minutes 
      minutes = minutes < 10 ? "0" + minutes : minutes;
      seconds = seconds < 10 ? "0" + seconds : seconds;
      display.textContent = minutes + ":" + seconds;

      if (currSecond === 0) {
        clearInterval(anim);
      }
    }), 1000);
  };
  //END TIMER

  //Event + and -
  //
  var sessionPlus = document.querySelector('.session__plus'),
      sessionMinus = document.querySelector('.session__minus'),
      breakPlus = document.querySelector('.break__plus'),
      breakMinus = document.querySelector('.break__minus'),
      time = document.querySelector('.time'),
      breakTime = document.querySelector('.break-time'),
      play = document.querySelector('.play'),
      stop = document.querySelector('.icon-stop'),
      pause = document.querySelector('.pause');

  function previousMinus(e) {
    var prev = this.previousSibling,
        val = parseInt(prev.textContent, 10);
    if (val > 0) {
      prev.textContent--;
      if (val === 1) {
        prev.classList.add('alert');
      }
    }
    if (!this.classList.contains('break__minus')) {
      time.textContent = prev.textContent + ':00';
      clearInterval(anim);
    } else {
      breakTime.textContent = prev.textContent + ':00';
    }

    play.classList.add('show');
    play.classList.remove('hide');
    pause.classList.add('hide');
    pause.classList.remove('show');
    stop.classList.remove('show');
    stop.classList.add('hide');

    e.preventDefault();
  }
  function nextPlus(e) {
    var next = this.nextSibling;
    var val = parseInt(next.textContent, 10);
    next.textContent++;
    if (val === 0) {
      next.classList.remove('alert');
    }
    if (!this.classList.contains('break__plus')) {
      time.textContent = next.textContent + ':00';
      clearInterval(anim);
    } else {
      breakTime.textContent = next.textContent + ':00';
    }
    play.classList.add('show');
    play.classList.remove('hide');
    pause.classList.add('hide');
    pause.classList.remove('show');
    stop.classList.remove('show');
    stop.classList.add('hide');
    e.preventDefault();
  }

  sessionMinus.addEventListener('click', previousMinus);
  sessionPlus.addEventListener('click', nextPlus);
  breakMinus.addEventListener('click', previousMinus);
  breakPlus.addEventListener('click', nextPlus);
  play.addEventListener('click', playPodomoro);
  pause.addEventListener('click', pausePodomoro);
  stop.addEventListener('click', stopPodomoro);

  function playPodomoro(e) {
    watch(display);
    play.classList.add('hide');
    play.classList.remove('show');
    pause.classList.add('show');
    pause.classList.remove('hide');
    stop.classList.remove('hide');
    stop.classList.add('show');
    stop.classList.remove('pause');
  }
  function pausePodomoro(e) {
    clearInterval(anim);
    play.classList.add('show');
    play.classList.remove('hide');
    pause.classList.add('hide');
    pause.classList.remove('show');
    stop.classList.add('pause');
  }
  function stopPodomoro(e) {
    clearInterval(anim);
    play.classList.add('show');
    play.classList.remove('hide');
    pause.classList.add('hide');
    pause.classList.remove('show');
    stop.classList.remove('show');
    stop.classList.add('hide');
    var sessionTime = document.querySelector('.session__time ').innerHTML;
    time.textContent = sessionTime + ':00';
  }
  //SVG
  //transform second to perimetre
  //path(stroke-dasharray='472', stroke-dashoffset='0.00', \
  //1== 1s donc 472 sec = 7.8 minutes soit 472/60 pour avoir les minutes
  //min * 60 = seconds 
  //donc 10min * 60 on obtient le resutat en seconde et le diametre du 
  //perimetre
  var distancePerPoint = 1;
  var drawFPS = 1000 / 10;
  var orig = document.querySelector('path'),
      length = void 0,
      timer = void 0;

  orig.addEventListener('mouseover', startDrawingPath, true);
  orig.addEventListener('mouseout', stopDrawingPath, true);

  function startDrawingPath() {
    length = 0;
    orig.style.stroke = '#f60';
    timer = setInterval(increaseLength, 1000);
  }

  function increaseLength() {
    var pathLength = orig.getTotalLength();
    length += distancePerPoint;
    //length=0 and path lenght = stroke-dasharray soit 472
    orig.style.strokeDasharray = [length, pathLength].join(' ');
    console.log([length, pathLength].join(' '));
    if (length >= pathLength) clearInterval(timer);
  }

  function stopDrawingPath() {
    clearInterval(timer);
    orig.style.stroke = '';
    orig.style.strokeDasharray = '';
  }

  //let d = 5000
  //new Vivus('my-svg', {
  //duration: d,
  //type: 'delayed',
  //start: 'manual',
  //onReady : (m) => {
  //m.el.setAttribute('height', 'auto');
  //m.el.play()

  //},
  //animTimingFunction: Vivus.EASE
  //})
})(fcc); //END
//# sourceMappingURL=data:application/json;base64,
